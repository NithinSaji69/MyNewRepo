1. Temperature Data Logger (2D Array)
Problem Statement: Design a program to log temperature readings from multiple sensors for 24 hours, sampled every hour.
Requirements:
Use a 2D array of size [N][24] to store temperature data, where N is the number of sensors (defined as a const variable).
Use static variables to calculate and store the daily average temperature for each sensor.
Use nested for loops to populate and analyze the array.
Use if statements to identify sensors exceeding a critical threshold temperature.

#include <stdio.h>

#define N 5 
#define CRITICAL_THRESHOLD 75.0

void logTemperatures(float temperatures[N][24]){
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < 24; j++) {
            printf("Enter temperature for sensor %d at hour %d: ", i, j);
            scanf("%f", &temperatures[i][j]);
        }
    }
}

void calculateDailyAverages(float temperatures[N][24], float dailyAverages[N]){
    for (int i = 0; i < N; i++) {
        float sum = 0.0;
        for (int j = 0; j < 24; j++) {
            sum += temperatures[i][j];
        }
        dailyAverages[i] = sum / 24;
    }
}

void identifyCriticalSensors(float dailyAverages[N]){
    for (int i = 0; i < N; i++) {
        if (dailyAverages[i] > CRITICAL_THRESHOLD) {
            printf("Sensor %d exceeds the critical threshold with an average temperature of %.2f\n", i, dailyAverages[i]);
        }
    }
}

int main(){
    float temperatures[N][24];
    float dailyAverages[N];

    logTemperatures(temperatures);
    calculateDailyAverages(temperatures, dailyAverages);
    identifyCriticalSensors(dailyAverages);

    return 0;
}

 
2. LED Matrix Control (2D Array)
Problem Statement: Simulate the control of an LED matrix of size 8x8. Each cell in the matrix can be ON (1) or OFF (0).
Requirements:
Use a 2D array to represent the LED matrix.
Use static variables to count the number of ON LEDs.
Use nested for loops to toggle the state of specific LEDs based on input commands.
Use if statements to validate commands (e.g., row and column indices).
 

 #include <stdio.h>

#define SIZE 8

void toggleLED(int matrix[SIZE][SIZE], int row, int col){
    static int onCount = 0; // Static variable to count the number of ON LEDs

    if (row >= 0 && row < SIZE && col >= 0 && col < SIZE){
        if (matrix[row][col] == 0) {
            matrix[row][col] = 1;
            onCount++;
        } else {
            matrix[row][col] = 0;
            onCount--;
        }
    } else {
        printf("Invalid row or column index.\n");
    }
    printf("Number of ON LEDs: %d\n", onCount);
}

void printMatrix(int matrix[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int matrix[SIZE][SIZE] = {0};

    toggleLED(matrix, 2, 3);
    toggleLED(matrix, 4, 5);
    toggleLED(matrix, 2, 3); 

    printf("LED Matrix:\n");
    printMatrix(matrix);

    return 0;
}


3. Robot Path Mapping (2D Array)
Problem Statement: Track the movement of a robot on a grid of size M x N.
Requirements:
Use a 2D array to store visited positions (1 for visited, 0 otherwise).
Declare grid dimensions using const variables.
Use a while loop to update the robot’s position based on input directions (e.g., UP, DOWN, LEFT, RIGHT).
Use if statements to ensure the robot stays within bounds.

 #include <stdio.h>

#define M 5
#define N 5

void display_grid(int grid[M][N]) {
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", grid[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int grid[M][N] = {0};
    int robot_x = 0, robot_y = 0;
    char command;

    grid[robot_x][robot_y] = 1;

    printf("Robot Path Mapping\n");
    printf("Grid Size: %d x %d\n", M, N);
    printf("Commands: W (UP), A (LEFT), S (DOWN), D (RIGHT), X (STOP)\n");

    while (1) {
        printf("\nEnter command: ");
        scanf(" %c", &command);

        if (command == 'X') {
            break;
        }

        if (command == 'W' && robot_x > 0) { 
            robot_x--;
        } else if (command == 'S' && robot_x < M - 1) {
            robot_x++;
        } else if (command == 'A' && robot_y > 0) {
            robot_y--;
        } else if (command == 'D' && robot_y < N - 1) {
            robot_y++;
        } else {
            printf("Invalid move. The robot is at the edge of the grid or invalid command.\n");
            continue;
        }

        grid[robot_x][robot_y] = 1;

        printf("Updated Grid:\n");
        display_grid(grid);
    }

    printf("\nFinal Grid State:\n");
    display_grid(grid);

    return 0;
}

4. Sensor Data Aggregation (3D Array)
Problem Statement: Store and analyze data from multiple sensors placed in a 3D grid (e.g., environmental sensors in a greenhouse).
Requirements:
Use a 3D array of size [X][Y][Z] to store data, where dimensions are defined using const variables.
Use nested for loops to populate the array with sensor readings.
Use if statements to find and count sensors reporting critical values (e.g., temperature > 50°C).
Use static variables to store aggregated results (e.g., average readings per layer).

#include <stdio.h>

#define X 3
#define Y 3
#define Z 3

void display_3D_array(int data[X][Y][Z]) {
    for (int i = 0; i < X; i++) {
        printf("Layer %d:\n", i + 1);
        for (int j = 0; j < Y; j++) {
            for (int k = 0; k < Z; k++) {
                printf("%d ", data[i][j][k]);
            }
            printf("\n");
        }
        printf("\n");
    }
}

int main() {
    int data[X][Y][Z];
    int critical_count = 0;
    static int layer_sum[X] = {0};
    int layer_avg[X];

    printf("Enter sensor readings for a %d x %d x %d grid:\n", X, Y, Z);
    for (int i = 0; i < X; i++) {
        for (int j = 0; j < Y; j++) {
            for (int k = 0; k < Z; k++) {
                printf("Enter reading for sensor at [%d][%d][%d]: ", i, j, k);
                scanf("%d", &data[i][j][k]);
                layer_sum[i] += data[i][j][k];
                if (data[i][j][k] > 50) {
                    critical_count++;
                }
            }
        }
    }

    for (int i = 0; i < X; i++) {
        layer_avg[i] = layer_sum[i] / (Y * Z);
    }

    printf("\nSensor Data:\n");
    display_3D_array(data);

    printf("Critical sensors (temperature > 50°C): %d\n", critical_count);
    for (int i = 0; i < X; i++) {
        printf("Average reading for Layer %d: %d\n", i + 1, layer_avg[i]);
    }

    return 0;
}

 
5. Image Processing (2D Array)
Problem Statement: Perform edge detection on a grayscale image represented as a 2D array.
Requirements:
Use a 2D array of size [H][W] to store pixel intensity values (defined using const variables).
Use nested for loops to apply a basic filter (e.g., Sobel filter) on the matrix.
Use decision-making statements to identify and highlight edge pixels (threshold-based).
Store the output image in a static 2D array.
 
#include <stdio.h>
#include <stdlib.h>

#define H 5
#define W 5

void display_matrix(int matrix[H][W]) {
    for (int i = 0; i < H; i++) {
        for (int j = 0; j < W; j++) {
            printf("%4d", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int image[H][W], edges[H][W] = {0};
    const int threshold = 100;

    printf("Enter pixel intensity values for a %d x %d image (0-255):\n", H, W);
    for (int i = 0; i < H; i++) {
        for (int j = 0; j < W; j++) {
            printf("Enter value for pixel [%d][%d]: ", i, j);
            scanf("%d", &image[i][j]);
        }
    }

    for (int i = 1; i < H - 1; i++) {
        for (int j = 1; j < W - 1; j++) {
            int gx = -image[i-1][j-1] - 2*image[i][j-1] - image[i+1][j-1]
                     + image[i-1][j+1] + 2*image[i][j+1] + image[i+1][j+1];
            int gy = -image[i-1][j-1] - 2*image[i-1][j] - image[i-1][j+1]
                     + image[i+1][j-1] + 2*image[i+1][j] + image[i+1][j+1];
            int magnitude = abs(gx) + abs(gy);
            edges[i][j] = (magnitude > threshold) ? 255 : 0;
        }
    }

    printf("\nOriginal Image:\n");
    display_matrix(image);

    printf("\nEdge Detected Image:\n");
    display_matrix(edges);

    return 0;
}

6. Traffic Light Controller (State Management with 2D Array)
Problem Statement: Manage the states of traffic lights at an intersection with four roads, each having three lights (red, yellow, green).
Requirements:
Use a 2D array of size [4][3] to store the state of each light (1 for ON, 0 for OFF).
Use nested for loops to toggle light states based on time intervals.
Use static variables to keep track of the current state cycle.
Use if statements to validate light transitions (e.g., green should not overlap with red).
 

 #include <stdio.h>

#define ROADS 4
#define LIGHTS 3

void display_traffic_lights(int lights[ROADS][LIGHTS]) {
    char light_labels[] = {'R', 'Y', 'G'};
    for (int i = 0; i < ROADS; i++) {
        printf("Road %d: ", i + 1);
        for (int j = 0; j < LIGHTS; j++) {
            if (lights[i][j] == 1) {
                printf("%c: ON\t", light_labels[j]);
            } else {
                printf("%c: OFF\t", light_labels[j]);
            }
        }
        printf("\n");
    }
    printf("\n");
}

int main() {
    int lights[ROADS][LIGHTS] = {0};
    static int cycle = 0;

    while (1) {
        printf("Traffic Light Controller (Cycle %d):\n", cycle + 1);

        for (int i = 0; i < ROADS; i++) {
            if (i == cycle) {
                lights[i][0] = 0;
                lights[i][1] = 1;
                lights[i][2] = 0;
            } else {
                lights[i][0] = 1;
                lights[i][1] = 0;
                lights[i][2] = 0;
            }
        }

        display_traffic_lights(lights);

        lights[cycle][1] = 0;
        lights[cycle][2] = 1;
        printf("Transitioning to G for Road %d:\n", cycle + 1);
        display_traffic_lights(lights);

        lights[cycle][2] = 0;
        lights[cycle][0] = 1;

        cycle = (cycle + 1) % ROADS;
        printf("Next cycle begins.\n\n");

        
        for (volatile int i = 0; i < 100000000; i++) {
            
        }
    }

    return 0;
}

7. 3D LED Cube Animation (3D Array)
Problem Statement: Simulate an animation on an LED cube of size 4x4x4.
Requirements:
Use a 3D array to represent the LED cube's state.
Use nested for loops to turn ON/OFF LEDs in a predefined pattern.
Use static variables to store animation progress and frame counters.
Use if-else statements to create transitions between animation frames.
 
 #include <stdio.h>

#define SIZE 4

void display_led_cube(int cube[SIZE][SIZE][SIZE]) {
    for (int z = 0; z < SIZE; z++) {
        printf("Layer %d:\n", z + 1);
        for (int y = 0; y < SIZE; y++) {
            for (int x = 0; x < SIZE; x++) {
                if (cube[x][y][z] == 1) {
                    printf("1 ");
                } else {
                    printf("0 ");
                }
            }
            printf("\n");
        }
        printf("\n");
    }
}

int main() {
    int led_cube[SIZE][SIZE][SIZE] = {0};
    static int frame = 0;
    static int counter = 0;

    while (1) {
        for (int x = 0; x < SIZE; x++) {
            for (int y = 0; y < SIZE; y++) {
                for (int z = 0; z < SIZE; z++) {
                    led_cube[x][y][z] = 0;
                }
            }
        }

        if (frame == 0) {
            for (int x = 0; x < SIZE; x++) {
                for (int y = 0; y < SIZE; y++) {
                    led_cube[x][y][2] = 1;
                }
            }
        } else if (frame == 1) {
            for (int i = 0; i < SIZE; i++) {
                led_cube[i][i][i] = 1;
            }
        } else if (frame == 2) {
            for (int x = 0; x < SIZE; x++) {
                for (int y = 0; y < SIZE; y++) {
                    led_cube[x][y][(x + y) % SIZE] = 1;
                }
            }
        } else {
            frame = -1;
        }

        printf("Animation Frame %d:\n", frame + 1);
        display_led_cube(led_cube);

        frame++;
        counter++;

        for (volatile int i = 0; i < 100000000; i++) {
        }
    }

    return 0;
}


8. Warehouse Inventory Tracking (3D Array)
Problem Statement: Track inventory levels for multiple products stored in a 3D warehouse (e.g., rows, columns, and levels).
Requirements:
Use a 3D array of size [P][R][C] to represent the inventory of P products in a grid.
Use nested for loops to update inventory levels based on shipments.
Use if statements to detect low-stock levels in any location.
Use a static variable to store total inventory counts for each product.
 
 #include <stdio.h>

#define P 3  
#define R 4  
#define C 5  

void display_inventory(int inventory[P][R][C]) {
    for (int p = 0; p < P; p++) {
        printf("Product %d Inventory:\n", p + 1);
        for (int r = 0; r < R; r++) {
            for (int c = 0; c < C; c++) {
                printf("Stock at (%d, %d): %d\n", r + 1, c + 1, inventory[p][r][c]);
            }
        }
        printf("\n");
    }
}

void update_inventory(int inventory[P][R][C], int product, int row, int col, int quantity) {
    if (product >= 0 && product < P && row >= 0 && row < R && col >= 0 && col < C) {
        inventory[product][row][col] += quantity;
    }
}

int main() {
    int inventory[P][R][C] = {0};
    static int total_inventory[P] = {0};
    int low_stock_threshold = 5;
    
    update_inventory(inventory, 0, 1, 2, 10);
    update_inventory(inventory, 1, 3, 4, 3);
    update_inventory(inventory, 2, 0, 0, 7);

    for (int p = 0; p < P; p++) {
        total_inventory[p] = 0;
        for (int r = 0; r < R; r++) {
            for (int c = 0; c < C; c++) {
                total_inventory[p] += inventory[p][r][c];
            }
        }
    }

    display_inventory(inventory);

    for (int p = 0; p < P; p++) {
        printf("Total stock for Product %d: %d\n", p + 1, total_inventory[p]);
        if (total_inventory[p] < low_stock_threshold) {
            printf("Warning: Product %d is below low stock threshold!\n", p + 1);
        }
    }

    return 0;
}

9. Signal Processing on a 3D Matrix
Problem Statement: Apply a basic signal filter to a 3D matrix representing sampled signals over time.
Requirements:
Use a 3D array of size [X][Y][Z] to store signal data.
Use nested for loops to apply a filter that smoothens the signal values.
Use if statements to handle boundary conditions while processing the matrix.
Store the filtered results in a static 3D array.
 

 #include <stdio.h>

#define X 4
#define Y 4
#define Z 4

void display_signal_matrix(int matrix[X][Y][Z]) {
    for (int z = 0; z < Z; z++) {
        printf("Time Sample %d:\n", z + 1);
        for (int y = 0; y < Y; y++) {
            for (int x = 0; x < X; x++) {
                printf("%d ", matrix[x][y][z]);
            }
            printf("\n");
        }
        printf("\n");
    }
}

void apply_filter(int signal[X][Y][Z], int filtered_signal[X][Y][Z]) {
    int dx[] = {-1, 0, 1, 0};
    int dy[] = {0, 1, 0, -1};
    int dz[] = {-1, 0, 1};
    
    for (int z = 0; z < Z; z++) {
        for (int y = 0; y < Y; y++) {
            for (int x = 0; x < X; x++) {
                int sum = signal[x][y][z];
                int count = 1;

                for (int i = 0; i < 3; i++) {
                    int nx = x + dx[i];
                    int ny = y + dy[i];
                    int nz = z + dz[i];

                    if (nx >= 0 && nx < X && ny >= 0 && ny < Y && nz >= 0 && nz < Z) {
                        sum += signal[nx][ny][nz];
                        count++;
                    }
                }
                filtered_signal[x][y][z] = sum / count;
            }
        }
    }
}

int main() {
    int signal[X][Y][Z] = {
        {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}},
        {{17, 18, 19, 20}, {21, 22, 23, 24}, {25, 26, 27, 28}, {29, 30, 31, 32}},
        {{33, 34, 35, 36}, {37, 38, 39, 40}, {41, 42, 43, 44}, {45, 46, 47, 48}},
        {{49, 50, 51, 52}, {53, 54, 55, 56}, {57, 58, 59, 60}, {61, 62, 63, 64}}
    };
    
    static int filtered_signal[X][Y][Z] = {0};

    printf("Original Signal Matrix:\n");
    display_signal_matrix(signal);

    apply_filter(signal, filtered_signal);

    printf("Filtered Signal Matrix:\n");
    display_signal_matrix(filtered_signal);

    return 0;
}


10. Weather Data Analysis (3D Array)
Problem Statement: Analyze weather data recorded over multiple locations and days, with hourly samples for each day.
Requirements:
Use a 3D array of size [D][L][H] to store temperature readings (D days, L locations, H hours per day).
Use nested for loops to calculate the average daily temperature for each location.
Use if statements to find the location and day with the highest temperature.
Use static variables to store results for each location.

#include <stdio.h>

#define D 3
#define L 4
#define H 24

void display_weather_data(int weather_data[D][L][H]) {
    for (int d = 0; d < D; d++) {
        printf("Day %d:\n", d + 1);
        for (int l = 0; l < L; l++) {
            printf("Location %d: ", l + 1);
            for (int h = 0; h < H; h++) {
                printf("%d ", weather_data[d][l][h]);
            }
            printf("\n");
        }
        printf("\n");
    }
}

void analyze_weather_data(int weather_data[D][L][H], float daily_avg[D][L], int highest_temp_day[D], int highest_temp_location[D]) {
    float avg_temp[L] = {0};
    int highest_temp = -100;
    int highest_day = 0;
    int highest_loc = 0;

    for (int d = 0; d < D; d++) {
        for (int l = 0; l < L; l++) {
            int total_temp = 0;
            for (int h = 0; h < H; h++) {
                total_temp += weather_data[d][l][h];
            }
            daily_avg[d][l] = total_temp / (float)H;

            avg_temp[l] += daily_avg[d][l];

            if (total_temp > highest_temp) {
                highest_temp = total_temp;
                highest_day = d;
                highest_loc = l;
            }
        }
    }

    for (int l = 0; l < L; l++) {
        avg_temp[l] /= D;
    }

    highest_temp_day[0] = highest_day;
    highest_temp_location[0] = highest_loc;
}

int main() {
    int weather_data[D][L][H] = {
        {{25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48},
         {15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38},
         {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33},
         {35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58}},
        
        {{20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43},
         {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33},
         {30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53},
         {25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48}},
        
        {{30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53},
         {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33},
         {20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43},
         {40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63}}
    };

    float daily_avg[D][L];
    int highest_temp_day[1], highest_temp_location[1];

    printf("Weather Data:\n");
    display_weather_data(weather_data);

    analyze_weather_data(weather_data, daily_avg, highest_temp_day, highest_temp_location);

    for (int d = 0; d < D; d++) {
        for (int l = 0; l < L; l++) {
            printf("Average temperature for Day %d, Location %d: %.2f°C\n", d + 1, l + 1, daily_avg[d][l]);
        }
    }

    printf("Highest temperature recorded on Day %d at Location %d.\n", highest_temp_day[0] + 1, highest_temp_location[0] + 1);

    return 0;
}
